namespace http://example.com/generated

grammar {
	//text = {
		attribute lang { string }?,
		attribute value { string }?,
		attribute key { string }?,
		EMPTY
	}

	( //label | //user | //title | //src ) = {
		attribute name { string }?,
		attribute id { string }?,
		attribute alias { string }?,
		attribute refId { string }?,
		( element menus?, element text* )
	}

	//entity = {
		attribute special { string }?,
		attribute name { string }?,
		attribute mode { string }?,
		attribute field { string }?,
		attribute nam { string }?,
		attribute category { string }?,
		( element attributes | element references | element description | element concepts | element properties | element semantic | element access | element lable | element categories | element keys | element label | element comment )+?
	}

	( //equal | //table ) = {
		attribute src { string }?,
		attribute field { string }?,
		( element user, element entity )
	}

	( //check | //sequence ) = {
		attribute name { string }?,
		( element equal | element field )
	}

	( //block | //emebd | //order ) = {
		attribute name { string }?,
		( element check, element text* )
	}

	( //content | //concept ) = {
		attribute name { string }?,
		( element block | element tab )
	}

	( //message | //groups ) = {
		attribute name { string },
		attribute position { string }?,
		attribute size { string }?,
		( element title, element content )
	}

	( //comment | //messages | //search ) = {
		attribute type { string }?,
		element message
	}

	//bdl = {
		attribute version { string }?,
		( element messages | element entities | element components | element processes | element managements )+
	}

	//attribute = {
		attribute is_a { string }?,
		attribute name { string }?,
		attribute type { string }?,
		attribute size { string }?,
		attribute target { string }?,
		attribute required { string }?,
		attribute validator { string }?,
		attribute equired { string }?,
		( element display | element description | element ref | element uiElement | element identField | element categories | element events | element concepts | element category | element label | element sequence | element emebd | element embed | element groups | element name | element comment | element search | element tableField | element hidden | element fk | element optional | element link | element searchField | element groupBy | element typed )+?
	}

	( //attributes | //tableField | //overview ) = {
		attribute src { string }?,
		attribute useRef { string }?,
		( element attribute | element categories | element semantic | element condition | element attribut )+?
	}

	//target = {
		attribute name { string },
		attribute id { string }?,
		attribute alias { string }?,
		attribute is { string }?,
		attribute max_lower { string }?,
		attribute max_higher { string }?,
		attribute inherit { string }?,
		element filters?
	}

	//ref = {
		attribute name { string }?,
		attribute binding { string }?,
		attribute relation { string }?,
		attribute target { string }?,
		attribute base { string }?,
		attribute type { string }?,
		( element target | element connection | element description | element label | element src | element comment )+?
	}

	( //references | //size ) = {
		attribute width { string }?,
		attribute height { string }?,
		attribute minWidth { string }?,
		attribute minHeight { string }?,
		attribute maxWidth { string }?,
		attribute maxHeight { string }?,
		element ref*
	}

	( //entities | //hidden | //group ) = {
		attribute name { string }?,
		attribute label { string }?,
		( element entity*, element references? )
	}

	( //description | //fk | //update ) = {
		attribute target { string }?,
		attribute targetId { string }?,
		attribute src { string }?,
		attribute window { string }?,
		element text*
	}

	//display = {
		attribute field { string }?,
		attribute type { string }?,
		( element text | element table | element overview )+?
	}

	//fields = {
		attribute value { string }?,
		attribute id { string }?,
		attribute order { string }?,
		attribute join { string }?,
		attribute srcId { string }?,
		( element id, element value, element order )?
	}

	//component = {
		attribute name { string }?,
		attribute src { string }?,
		attribute type { string },
		( ( element source?, element head, element body? ) | ( ( element label*, element description? )?, element fields, element filters? ) )
	}

	( //components | //tag ) = {
		attribute lang { string }?,
		( element component | element component_ex )+
	}

	( //concepts | //link ) = {
		attribute name { string }?,
		element concept
	}

	( //connection | //group_role ) = {
		attribute name { string },
		element attributes?
	}

	//category = {
		attribute name { string }?,
		attribute label { string }?,
		attribute main { string }?,
		attribute type { string }?,
		attribute position { string }?,
		( ( element layout | element access )?, element label )?
	}

	//categories = {
		attribute main { string }?,
		attribute position { string }?,
		( element category* | element group )?
	}

	//uiElement = {
		attribute type { string },
		attribute class { string }?,
		attribute size { string }?,
		attribute src { string }?,
		attribute readonly { string }?,
		attribute hardcoded { string }?,
		attribute filter { string }?,
		( element filters | element field* | ( element layout, element size ) )?
	}

	//identField = {
		attribute src { string }?,
		attribute field { string }?,
		element paths?
	}

	//layout = {
		attribute valign { string }?,
		element col*
	}

	( //semantic | //searchField ) = {
		attribute type { string }?,
		( element group* | element concepts | element genders | ( element parent?, element tags ) )?
	}

	( //properties | //reference ) = {
		attribute src { string }?,
		attribute id { string }?,
		( element component | ( element close, element max ) | ( element closable, element readonly, element disabled, element reload, element hidden ) )?
	}

	( //tags | //owner | //onLeave | //required | //startpoint ) = {
		attribute type { string }?,
		element tag*
	}

	//acl = {
		attribute type { string }?,
		( element group | ( element role?, element owner, ( element responsible, element user )? ) )?
	}

	( //access | //onArrive | //fail | //endpoint ) = {
		attribute type { string }?,
		element acl?
	}

	( //lable | //col | //reload | //right | //info | //constraint ) = {
		attribute key { string }?,
		attribute size { string }?,
		attribute type { string }?,
		attribute align { string }?,
		( element text* | element entity )
	}

	//filter = {
		attribute srcField { string }?,
		attribute targetField { string }?,
		attribute srcId { string }?,
		attribute targetId { string }?,
		( element description | element paths )?
	}

	//filters = {
		attribute name { string }?,
		element filter
	}

	( //onUpdate | //template ) = {
		attribute page { string }?,
		attribute slice { string }?,
		element update?
	}

	( //groupBy | //responsible | //events ) = {
		attribute srcId { string }?,
		attribute targetId { string }?,
		( ( element onInsert?, element onUpdate ) | ( element onArrive, ( element onDeadline, element onFallback )?, element onLeave ) )?
	}

	//status = {
		attribute src { string }?,
		attribute id { string }?,
		( element reference | ( element menus, element text ) )
	}

	( //typed | //param | //gender ) = {
		attribute lang { string }?,
		attribute key { string }?,
		( element group | element owner )?
	}

	//action = {
		attribute name { string }?,
		element param*
	}

	( //onInsert | //always | //insert ) = {
		attribute window { string }?,
		element action*
	}

	//path = {
		attribute target { string }?,
		attribute name { string }?,
		attribute alias { string }?,
		attribute srcId { string }?,
		attribute targetId { string }?,
		attribute field { string }?,
		( element label, element description?, element acl, ( ( element check, element success, element fail )?, element always )? )?
	}

	//field = {
		attribute field { string }?,
		attribute src { string }?,
		attribute name { string }?,
		attribute type { string }?,
		( element label | element size | element required | element color | element sum )?
	}

	( //paths | //form_insert ) = {
		attribute src { string }?,
		element path*
	}

	//node = {
		attribute name { string },
		attribute target { string }?,
		( element events | element paths | element activ | element label | element startpoint | element endpoint )+
	}

	( //activ | //form_edit ) = {
		attribute src { string }?,
		element target*
	}

	//process = {
		attribute name { string },
		attribute src { string },
		( element status, element node* )
	}

	( //processes | //color | //key ) = {
		attribute value { string }?,
		element process
	}

	( //menus | //attribut | //sum ) = {
		attribute is_a { string }?,
		( element left, element right )
	}

	//bars = {
		( element title, element status, element info, element action )
	}

	//head = {
		attribute unit { string }?,
		( element field* | ( element size?, element properties, ( element bars | ( element label, element tooltip ) ), element access, element constraint?, element events ) )
	}

	//row = {
		attribute name { string }?,
		attribute type { string }?,
		( element cms* | element ref | element entity | element text | element html | element template | ( element access, element constraint, element category ) | ( element caption?, element col* ) )
	}

	//body = {
		( element row | element tab )
	}

	//tab = {
		attribute name { string },
		( ( element head, element body ) | ( element properties, element label, element tooltip, element access, element constraint, element events, element row* ) )
	}

	//component_ex = {
		attribute type { string },
		attribute name { string },
		attribute src { string },
		( element size, element properties, element bars, element access, element events, element content )
	}

	//genders = {
		element gender*
	}

	//if = {
		attribute exists { string }?,
		( element attribute* | element entity | element group_role )
	}

	//then = {
		element form_edit
	}

	//condition = {
		( element if*, ( element then | element else ) )
	}

	//view = {
		( element insert, element update, element table, element overview, element form_insert, element form_edit, element condition )
	}

	//management = {
		attribute name { string },
		attribute src { string },
		( element label, element description, element semantic, element events, element view, element references )
	}

	//managements = {
		element management*
	}

	//primaryKey = {
		element key
	}

	//keys = {
		element primaryKey
	}

	//source = {
		attribute name { string },
		element path
	}

	//else = {
		element attribute*
	}

	//parent = {
		attribute target { string },
		element uiElement
	}

}
