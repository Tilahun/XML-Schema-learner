namespace http://example.com/generated

grammar {
	( //title/text | //block/text | //attribute/description/text | //ref/label/text | //entity/label/text | //component/description/text | //category/label/text | //tag ) = {
		attribute lang { string }?,
		attribute value { string }?,
		attribute key { string }?,
		EMPTY
	}

	( //ref/label | //entity/label | //category/label ) = {
		element text*
	}

	//equal/entity = {
		attribute special { string }?,
		EMPTY
	}

	//equal = {
		( element user, element entity )
	}

	//block/check = {
		element equal
	}

	//block = {
		( element check, element text* )
	}

	//message/content = {
		element block
	}

	//message = {
		attribute name { string },
		( element title, element content )
	}

	//messages = {
		element message
	}

	//bdl = {
		attribute version { string }?,
		( element messages | element entities | element components | element processes | element managements )+
	}

	//entity/attributes/attribute = {
		attribute is_a { string }?,
		attribute name { string }?,
		attribute type { string }?,
		attribute size { string }?,
		attribute target { string }?,
		attribute required { string }?,
		attribute validator { string }?,
		attribute equired { string }?,
		( element display | element ref | element uiElement | element identField | element hidden | element comment | element categories | element events | element description | element sequence | element emebd | element embed | element name | element search | element searchField | element groups | element tableField | element fk | element optional | element link | element groupBy | element concepts | element typed | element label | element category )+?
	}

	//entity/attributes = {
		( element attribute | element categories | element semantic | element condition | element attribut )+?
	}

	//src = {
		attribute name { string },
		attribute id { string }?,
		attribute alias { string }?,
		attribute refId { string }?,
		EMPTY
	}

	//entity/references/ref/target = {
		attribute name { string },
		attribute id { string },
		attribute alias { string }?,
		attribute inherit { string }?,
		element filters?
	}

	//entity/references/ref = {
		attribute name { string },
		attribute binding { string }?,
		attribute relation { string },
		attribute target { string }?,
		attribute base { string }?,
		( element src | element target | element connection | element label | element comment | element description )+?
	}

	//entity/references = {
		element ref*
	}

	//entities/entity = {
		attribute name { string },
		( element attributes | element references | element concepts | element properties | element semantic | element access | element lable | element categories | element keys | element description | element label | element comment )+
	}

	//entities = {
		( element entity*, element references? )
	}

	//table = {
		attribute src { string }?,
		attribute field { string }?,
		EMPTY
	}

	( //if/attribute | //else/attribute | //entity/references/ref/connection/attributes/attribute ) = {
		attribute name { string }?,
		attribute target { string }?,
		attribute type { string }?,
		EMPTY
	}

	//display = {
		attribute field { string }?,
		attribute type { string }?,
		( element table | element text | element overview )+?
	}

	//row/ref = {
		attribute type { string }?,
		attribute name { string }?,
		EMPTY
	}

	//components/component/fields = {
		attribute value { string }?,
		attribute id { string }?,
		attribute join { string }?,
		attribute srcId { string }?,
		( element id, element value, element order )?
	}

	//components/component = {
		attribute name { string }?,
		attribute src { string },
		attribute type { string },
		( ( element source?, element head, element body? ) | ( ( element label*, element description? )?, element fields, element filters? ) )
	}

	//components = {
		( element component | element component_ex )+
	}

	//entity/concepts = {
		element concept
	}

	//entity/references/ref/connection = {
		attribute name { string },
		element attributes?
	}

	//attributes/condition/if = {
		attribute exists { string }?,
		element attribute*
	}

	//groups = {
		attribute name { string }?,
		attribute position { string }?,
		attribute size { string }?,
		EMPTY
	}

	( //tableField | //overview ) = {
		attribute src { string }?,
		attribute useRef { string }?,
		EMPTY
	}

	//attributes/categories/category = {
		attribute name { string }?,
		attribute label { string }?,
		attribute main { string }?,
		attribute type { string }?,
		( ( element layout | element access )?, element label )?
	}

	//attributes/categories = {
		( element category* | element group )
	}

	//attribute/uiElement = {
		attribute type { string },
		attribute class { string }?,
		attribute size { string }?,
		attribute src { string }?,
		attribute readonly { string }?,
		attribute hardcoded { string }?,
		attribute filter { string }?,
		( element filters | element field* | ( element layout, element size ) )?
	}

	//identField = {
		attribute src { string }?,
		attribute field { string }?,
		element paths?
	}

	//uiElement/layout = {
		attribute valign { string },
		EMPTY
	}

	( //uiElement/size | //head/size | //component_ex/size ) = {
		attribute width { string },
		attribute height { string }?,
		attribute minWidth { string }?,
		attribute minHeight { string }?,
		attribute maxWidth { string }?,
		attribute maxHeight { string }?,
		EMPTY
	}

	( //categories/group | //semantic/group ) = {
		attribute name { string }?,
		attribute label { string }?,
		EMPTY
	}

	//attributes/semantic = {
		element group*
	}

	//properties/component/fields = {
		attribute value { string },
		attribute id { string },
		attribute order { string },
		EMPTY
	}

	//properties/component = {
		attribute type { string },
		element fields
	}

	//entity/properties = {
		element component?
	}

	//onUpdate/update = {
		attribute target { string }?,
		attribute targetId { string }?,
		attribute src { string }?,
		EMPTY
	}

	//attribute/categories = {
		attribute main { string },
		attribute position { string }?,
		EMPTY
	}

	//tags = {
		element tag*
	}

	//entity/semantic = {
		( element concepts | ( element parent?, element tags ) )?
	}

	//entities/references/ref/target = {
		attribute name { string }?,
		attribute id { string }?,
		EMPTY
	}

	//entity/access = {
		element acl
	}

	//entities/references/ref/connection/attributes/attribute = {
		attribute name { string },
		attribute is_a { string },
		EMPTY
	}

	//entities/references/ref/connection/attributes = {
		element attribute*
	}

	//entities/references/ref/connection = {
		attribute name { string },
		element attributes
	}

	//entities/references/ref = {
		attribute name { string },
		attribute binding { string },
		attribute relation { string },
		( element label, element src, element connection, element target )
	}

	//entities/references = {
		element ref
	}

	( //lable/text | //status/text | //caption/text | //body/row/col/text | //gender ) = {
		attribute lang { string },
		attribute key { string }?,
		EMPTY
	}

	//body/row/col = {
		attribute key { string }?,
		attribute size { string }?,
		attribute type { string }?,
		element text*
	}

	( //activ/target | //link ) = {
		attribute name { string }?,
		attribute is { string }?,
		attribute max_lower { string }?,
		attribute max_higher { string }?,
		EMPTY
	}

	//target/filters/filter = {
		attribute srcField { string },
		attribute targetField { string },
		element description
	}

	//target/filters = {
		element filter
	}

	//attribute/events/onUpdate = {
		element update
	}

	//attribute/events = {
		element onUpdate
	}

	//reference = {
		attribute src { string },
		attribute id { string },
		EMPTY
	}

	//process/status = {
		attribute src { string },
		attribute id { string },
		element reference
	}

	//identField/paths/path = {
		attribute name { string }?,
		attribute alias { string }?,
		attribute srcId { string }?,
		attribute targetId { string }?,
		EMPTY
	}

	//onArrive = {
		element acl?
	}

	//node/events = {
		( element onArrive, ( element onDeadline, element onFallback )?, element onLeave )
	}

	//path/acl = {
		element owner?
	}

	//param = {
		( element group | element owner )?
	}

	//always/action = {
		attribute name { string },
		element param*
	}

	//always = {
		element action*
	}

	//node/paths/path = {
		attribute target { string },
		( element label, element description?, element acl, ( ( element check, element success, element fail )?, element always )? )
	}

	//check/field = {
		attribute field { string },
		attribute src { string },
		element required
	}

	//path/check = {
		element field
	}

	//node/paths = {
		element path*
	}

	//node = {
		attribute name { string },
		attribute target { string }?,
		( element startpoint | element events | element paths | element activ | element endpoint | element label )+
	}

	//onArrive/acl = {
		element group
	}

	//activ = {
		element target*
	}

	//process = {
		attribute name { string },
		attribute src { string },
		( element status, element node* )
	}

	//processes = {
		element process
	}

	//identField/paths = {
		element path
	}

	//entity/categories = {
		attribute main { string },
		element category?
	}

	( //row/category | //entity/categories/category ) = {
		attribute name { string }?,
		attribute mode { string }?,
		attribute nam { string }?,
		attribute category { string }?,
		EMPTY
	}

	//component/filters/filter = {
		attribute srcId { string },
		attribute targetId { string },
		EMPTY
	}

	//component/filters = {
		element filter
	}

	( //head/bars/action | //component_ex/bars/action | //max | //right | //constraint ) = {
		attribute lang { string }?,
		EMPTY
	}

	( //component_ex/properties | //component/head/properties ) = {
		( element close, element max )
	}

	//menus = {
		( element left, element right )
	}

	( //head/bars/status | //component_ex/bars/status ) = {
		( element menus, element text )
	}

	//bars = {
		( element title, element status, element info, element action )
	}

	//component/head = {
		attribute unit { string }?,
		( element field* | ( element size, element properties, element bars, element access, element events ) )
	}

	( //tab/properties | //tab/head/properties ) = {
		( element closable, element readonly, element disabled, element reload, element hidden )
	}

	//tab/head = {
		( element properties, element label, element tooltip, element access, element constraint, element events )
	}

	//body/row = {
		attribute name { string },
		attribute type { string },
		( element caption, element col* )
	}

	//tab/body = {
		element row
	}

	//body/tab = {
		attribute name { string },
		( element head, element body )
	}

	//component/body = {
		element tab
	}

	//caption = {
		element text
	}

	//tab/row/col = {
		attribute size { string }?,
		attribute type { string }?,
		attribute key { string }?,
		( element entity | element text )?
	}

	//tab/row = {
		attribute name { string }?,
		attribute type { string }?,
		( element cms* | element html | element text | element ref | element entity | element template | ( element access, element constraint, element category ) | ( element caption?, element col* ) )
	}

	//template = {
		attribute page { string }?,
		attribute slice { string }?,
		EMPTY
	}

	//content/tab = {
		attribute name { string },
		( element properties, element label, element tooltip, element access, element constraint, element events, element row* )
	}

	//component_ex/content = {
		element tab
	}

	//component_ex = {
		attribute type { string },
		attribute name { string },
		attribute src { string },
		( element size, element properties, element bars, element access, element events, element content )
	}

	( //attribute/concepts/concept | //semantic/concepts/concept ) = {
		attribute name { string },
		attribute field { string }?,
		EMPTY
	}

	( //attribute/concepts | //semantic/concepts ) = {
		element concept
	}

	//layout/col = {
		attribute type { string },
		attribute align { string },
		EMPTY
	}

	//category/layout = {
		element col*
	}

	//management/events/onUpdate = {
		attribute window { string }?,
		EMPTY
	}

	//category/access/acl = {
		attribute type { string },
		( element role, element owner, element responsible, element user )
	}

	//category/access = {
		element acl
	}

	//attribute/label = {
		element text*
	}

	//genders = {
		element gender*
	}

	//management/semantic = {
		element genders
	}

	//management/events = {
		( element onInsert, element onUpdate )
	}

	//form_edit = {
		attribute src { string },
		EMPTY
	}

	//view/condition/if = {
		( element group_role | element entity )
	}

	( //uiElement/field | //group_role ) = {
		attribute name { string },
		attribute position { string }?,
		EMPTY
	}

	//then = {
		element form_edit
	}

	//view/condition = {
		( element if*, element then )
	}

	//view = {
		( element insert, element update, element table, element overview, element form_insert, element form_edit, element condition )
	}

	//management/references = {
		element ref*
	}

	//management = {
		attribute name { string },
		attribute src { string },
		( element label, element description, element semantic, element events, element view, element references )
	}

	//managements = {
		element management*
	}

	//row/text = {
		attribute key { string },
		EMPTY
	}

	//filter/paths/path = {
		attribute field { string },
		EMPTY
	}

	//filter/paths = {
		element path
	}

	//uiElement/filters/filter = {
		attribute srcId { string },
		attribute targetId { string },
		element paths?
	}

	//uiElement/filters = {
		attribute name { string }?,
		element filter
	}

	( //source/path | //key ) = {
		attribute srcId { string }?,
		attribute target { string }?,
		EMPTY
	}

	//primaryKey = {
		element key
	}

	//keys = {
		element primaryKey
	}

	//source = {
		attribute name { string },
		element path
	}

	//field/size = {
		attribute width { string },
		EMPTY
	}

	//color = {
		attribute value { string },
		EMPTY
	}

	( //attribut | //sum ) = {
		attribute is_a { string }?,
		EMPTY
	}

	//head/field = {
		attribute name { string },
		attribute src { string }?,
		attribute type { string }?,
		( element size | element color | element label | element sum )+
	}

	//else = {
		element attribute*
	}

	//attributes/condition = {
		( element if, element else )
	}

	//parent/uiElement = {
		attribute type { string },
		EMPTY
	}

	//parent = {
		attribute target { string },
		element uiElement
	}

}
