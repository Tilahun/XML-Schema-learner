namespace http://example.com/generated

grammar {
	//parent/uiElement = {
		attribute lang { string }?,
		attribute special { string }?,
		attribute name { string }?,
		attribute id { string }?,
		attribute alias { string }?,
		attribute refId { string }?,
		attribute src { string }?,
		attribute field { string }?,
		attribute type { string }?,
		attribute value { string }?,
		attribute key { string }?,
		attribute position { string }?,
		attribute size { string }?,
		attribute useRef { string }?,
		attribute valign { string }?,
		attribute width { string }?,
		attribute label { string }?,
		attribute target { string }?,
		attribute main { string }?,
		attribute targetId { string }?,
		attribute is { string }?,
		attribute max_lower { string }?,
		attribute max_higher { string }?,
		attribute height { string }?,
		attribute minWidth { string }?,
		attribute minHeight { string }?,
		attribute maxWidth { string }?,
		attribute maxHeight { string }?,
		attribute mode { string }?,
		attribute page { string }?,
		attribute slice { string }?,
		attribute align { string }?,
		attribute srcId { string }?,
		attribute window { string }?,
		attribute nam { string }?,
		attribute category { string }?,
		attribute is_a { string }?,
		( element text* | element entity )
	}

	//equal = {
		( element user, element entity )
	}

	//block/check = {
		element equal
	}

	//block = {
		( element check, element text* )
	}

	//message/content = {
		element block
	}

	//message = {
		attribute name { string },
		( element title, element content )
	}

	//messages = {
		element message
	}

	//bdl = {
		attribute version { string }?,
		( element messages | element entities | element components | element processes | element managements )+
	}

	//attribute = {
		attribute is_a { string }?,
		attribute name { string }?,
		attribute type { string }?,
		attribute size { string }?,
		attribute target { string }?,
		attribute required { string }?,
		attribute validator { string }?,
		attribute equired { string }?,
		( element display | element identField | element events | element sequence | element emebd | element name | element description | element embed | element search | element ref | element groups | element tableField | element hidden | element comment | element fk | element categories | element optional | element link | element searchField | element groupBy | element typed | element category | element label | element concepts | element uiElement )+?
	}

	//attributes = {
		( element attribute | element categories | element semantic | element condition | element attribut )+
	}

	//attribute/uiElement = {
		attribute name { string }?,
		attribute id { string }?,
		attribute alias { string }?,
		attribute inherit { string }?,
		attribute type { string }?,
		attribute class { string }?,
		attribute size { string }?,
		attribute src { string }?,
		attribute readonly { string }?,
		attribute hardcoded { string }?,
		attribute filter { string }?,
		( element filters | element field* | ( element layout, element size ) )?
	}

	//ref = {
		attribute name { string },
		attribute binding { string }?,
		attribute relation { string }?,
		attribute target { string }?,
		attribute base { string }?,
		( element target | element src | element comment | element label | element description | element connection )+?
	}

	//references = {
		element ref*
	}

	( //entities/entity | //connection ) = {
		attribute name { string },
		( element attributes | element references | element concepts | element semantic | element access | element keys | element description | element comment | element label | element lable | element properties | element categories )+
	}

	//entities = {
		( element entity*, element references? )
	}

	//display = {
		attribute field { string }?,
		attribute type { string }?,
		( element table | element text | element overview )?
	}

	//fields = {
		attribute value { string }?,
		attribute id { string }?,
		attribute order { string }?,
		attribute join { string }?,
		attribute srcId { string }?,
		( element id, element value, element order )?
	}

	//component = {
		attribute name { string }?,
		attribute src { string }?,
		attribute type { string },
		( ( element source?, element head, element body? ) | ( ( element label*, element description? )?, element fields, element filters? ) )
	}

	( //connection/properties | //entity/properties ) = {
		( element component | element component_ex )+
	}

	//concepts = {
		element concept
	}

	//category = {
		attribute name { string }?,
		attribute label { string }?,
		attribute main { string }?,
		attribute type { string }?,
		( ( element access | element layout )?, element label )?
	}

	//onArrive/acl = {
		attribute main { string }?,
		( element category* | element group )
	}

	( //identField | //filter ) = {
		attribute src { string }?,
		attribute field { string }?,
		attribute srcField { string }?,
		attribute targetField { string }?,
		attribute srcId { string }?,
		attribute targetId { string }?,
		( element paths | element description )?
	}

	//attributes/semantic = {
		element group*
	}

	//tags = {
		element tag*
	}

	( //connection/semantic | //entity/semantic ) = {
		( element concepts | ( element parent?, element tags ) )?
	}

	( //connection/access/acl | //entity/access/acl | //category/access/acl ) = {
		attribute type { string }?,
		( element role, element owner, element responsible, element user )?
	}

	//access = {
		element acl
	}

	//filters = {
		attribute name { string }?,
		element filter
	}

	//onUpdate = {
		element update?
	}

	//attribute/events = {
		element onUpdate
	}

	//process/status = {
		attribute src { string },
		attribute id { string },
		element reference
	}

	//onArrive = {
		element acl?
	}

	//node/events = {
		( element onArrive, ( element onDeadline, element onFallback )?, element onLeave )
	}

	( //path/acl | //param ) = {
		( element owner | element group )?
	}

	//always/action = {
		attribute name { string },
		element param*
	}

	//always = {
		element action*
	}

	( //identField/paths/path | //filter/paths/path | //node/paths/path ) = {
		attribute target { string }?,
		attribute name { string }?,
		attribute alias { string }?,
		attribute srcId { string }?,
		attribute targetId { string }?,
		attribute field { string }?,
		( element label, element description?, element acl, ( ( element check, element success, element fail )?, element always )? )?
	}

	//check/field = {
		attribute field { string },
		attribute src { string },
		element required
	}

	//path/check = {
		element field
	}

	//paths = {
		element path*
	}

	//node = {
		attribute name { string },
		attribute target { string }?,
		( element events | element paths | element activ | element startpoint | element endpoint | element label )+
	}

	//activ = {
		element target*
	}

	//process = {
		attribute name { string },
		attribute src { string },
		( element status, element node* )
	}

	//processes = {
		element process
	}

	( //tab/properties | //component_ex/properties | //component/head/properties | //tab/head/properties ) = {
		( ( element close, element max ) | ( element closable, element readonly, element disabled, element reload, element hidden ) )
	}

	//menus = {
		( element left, element right )
	}

	( //head/bars/status | //component_ex/bars/status ) = {
		( element menus, element text )
	}

	//bars = {
		( element title, element status, element info, element action )
	}

	//component/head = {
		attribute unit { string }?,
		( element field* | ( element size, element properties, element bars, element access, element events ) )
	}

	//tab/head = {
		( element properties, element label, element tooltip, element access, element constraint, element events )
	}

	( //layout | //row ) = {
		attribute name { string }?,
		attribute type { string }?,
		( element cms* | element html | element template | element ref | element entity | element text | ( element access, element constraint, element category ) | ( element caption?, element col* ) )
	}

	//tab/body = {
		element row
	}

	//body/tab = {
		attribute name { string },
		( element head, element body )
	}

	//component/body = {
		element tab
	}

	//content/tab = {
		attribute name { string },
		( element properties, element label, element tooltip, element access, element constraint, element events, element row* )
	}

	//component_ex/content = {
		element tab
	}

	//component_ex = {
		attribute type { string },
		attribute name { string },
		attribute src { string },
		( element size, element properties, element bars, element access, element events, element content )
	}

	//genders = {
		element gender*
	}

	//management/semantic = {
		element genders
	}

	//management/events = {
		( element onInsert, element onUpdate )
	}

	( //if | //else ) = {
		attribute exists { string }?,
		( element attribute* | element entity | element group_role )
	}

	//then = {
		element form_edit
	}

	//view/condition = {
		( element if*, element then )
	}

	//view = {
		( element insert, element update, element table, element overview, element form_insert, element form_edit, element condition )
	}

	//management = {
		attribute name { string },
		attribute src { string },
		( element label, element description, element semantic, element events, element view, element references )
	}

	//managements = {
		element management*
	}

	//primaryKey = {
		element key
	}

	//keys = {
		element primaryKey
	}

	//source = {
		attribute name { string },
		element path
	}

	//head/field = {
		attribute name { string },
		attribute src { string }?,
		attribute type { string }?,
		( element size | element color | element label | element sum )
	}

	//attributes/condition = {
		( element if, element else )
	}

	//parent = {
		attribute target { string },
		element uiElement
	}

}
