#!/usr/bin/php
<?php
/**
 * Schema learning
 *
 * This file is part of SchemaLearner.
 *
 * SchemaLearner is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * SchemaLearner is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with SchemaLearner; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * @package Core
 * @version $Revision: 1236 $
 * @license http://www.gnu.org/licenses/gpl-3.0.txt GPL
 */

require __DIR__ . '/src/environment.php';

// Handle provided options
$defaults = array(
    'help'     => null,
    'type'     => 'dtd',
    'locality' => 'n',
    'merger'   => 'exact',
);

$mapping = array(
    'h' => 'help',
    't' => 'type',
    'l' => 'locality',
    'm' => 'merger',
);

$options = getopt(
    'ht:l:m:',
    array(
        'help',
        'type:',
        'locality:',
        'merger:',
    )
);

// Merge options
foreach ( $mapping as $short => $long )
{
    if ( isset( $options[$short] ) &&
         !isset( $options[$long] ) )
    {
        $options[$long] = $options[$short];
        unset( $options[$short] );
    }
}
$options += $defaults;

// Show help output, if requested
if ( ( $options['help'] !== null ) ||
     ( count( $argv ) <= 1 ) )
{
    echo <<<EOHELP
Schema Learner
by Kore Nordmann

Usage: {$argv[0]} [-t <type>] (-r <root>)+ <xml-files>

General options:

-t / --type     Type of the schema to generate. Currently implemented schema 
                languages: dtd, xsd

-h / --help     Display this help output

XML Schema specific options:

-l / --locality Locality of the types when inferencing XML Schema schemata.
                Valid values are integer numbers, or "n".

-m / --merger   Algorithm used for type merging, available options are "none",
                "exact", "node-based".

EOHELP;
    exit( 0 );
}

$typeMerger = array(
    'none'            => new slNoTypeMerger(),
    'exact'           => new slExactTypeMerger(),
    'node-based'      => new slNodeBasedTypeMerger(),
    'attr-node-based' => new slAttributeNodeBasedTypeMerger(),
    'magic'           => new slMagicTypeMerger(),
);

switch ( $options['type'] )
{
    case 'dtd':
        $schema = new slDtdSchema();
        $visitor = new slSchemaDtdVisitor();
        break;

    case 'xsd':
        $schema = new slXsdSchema();

        // Set type inferencer based on configuration options.
        if ( $options['locality'] === 'n' )
        {
            $schema->setTypeInferencer( new slFullPathTypeInferencer() );
        }
        else
        {
            $schema->setTypeInferencer( new slKLocalTypeInferencer( (int) $options['locality'] ) );
        }

        // Set type merger based on configuration options.
        if ( !isset( $typeMerger[$options['merger']] ) )
        {
            echo "Unknown type merger '{$options['merger']}'.\n";
            exit( 2 );
        }
        $schema->setTypeMerger( $typeMerger[$options['merger']] );

        $visitor = new slSchemaXmlSchemaVisitor();
        break;

    default:
        echo "Unknown schema type '{$options['type']}'.\n";
        exit( 2 );
}

// Learn from files
$files = array_slice( $argv, 1 );
foreach ( $files as $file )
{
    if ( !file_exists( $file ) )
    {
        continue;
    }

    $schema->learnFile( $file );
}

// Echo resulting schema
echo $visitor->visit( $schema );

